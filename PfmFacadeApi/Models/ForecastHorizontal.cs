
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace CppeDb.DataAccess.Models
{
    /// <summary></summary>
    [Table("ForecastHorizontal")]
    public partial class ForecastHorizontal
    {

        /// <summary></summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public ForecastHorizontal()
        {
             //this.ForecastHorizontalDetails_ForecastHorizontal = new HashSet<ForecastHorizontalDetail>();  //FK_ForecastHorizontalDetails_ForecastHorizontal
             //this.ForecastParameter_ForecastHorizontal = new HashSet<ForecastParameter>();  //FK_ForecastParameter_ForecastHorizontal
             //this.ForecastSeasonalRisks_ForecastHorizontal = new HashSet<ForecastSeasonalRisk>();  //FK_ForecastSeasonalRisks_ForecastHorizontal
             //this.TypeCurves_ForecastHorizontal = new HashSet<TypeCurve>();  //FK_TypeCurves_ForecastHorizontal
        AfterConstructor();
        }
    
        ///<summary>Provide the actual method AfterConstructor() in a partial class and it will get called as the last point in construction.</summary>
        partial void AfterConstructor();
    
            /// <summary></summary>
            [Key]
            
            
            public int ForecastHorizontalId { get; set; }
            /// <summary></summary>
            
            
            
            public int ForecastId { get; set; }
            /// <summary></summary>
            
            
            
            public int? ForecastTypeId { get; set; }
            /// <summary></summary>
            
            
            
            public int? OutputRateId { get; set; }
            /// <summary></summary>
            
            
            
            public int? ProvenDevelopedProducingDatasetId { get; set; }
            /// <summary></summary>
            
            
            
            public int? GasCalculationId { get; set; }
            /// <summary></summary>
            
            
            
            public int? InitialFlowRateQiId { get; set; }
            /// <summary></summary>
            
            
            
            public int? InitialFlowRateQiMax { get; set; }
            /// <summary></summary>
            
            
            
            public int? InitialOilRampTypeId { get; set; }
            /// <summary></summary>
            
            
            
            public int? InitialGasRampTypeId { get; set; }
            /// <summary></summary>
            
            
            
            public int? ShutinOilRampTypeId { get; set; }
            /// <summary></summary>
            
            
            
            public int? ShutinGasRampTypeId { get; set; }
            /// <summary></summary>
            
            
            
            public bool? IncludeSi { get; set; }
            /// <summary></summary>
            
            
            
            [DecimalPrecision(10, 6)]public decimal? SiMergeBufferNumberOfDays { get; set; }
            /// <summary></summary>
            
            
            
            public bool? GlobalTerminalDecline { get; set; }
            /// <summary></summary>
            
            
            
            [DecimalPrecision(10, 4)]public decimal? TerminalOilDecline { get; set; }
            /// <summary></summary>
            
            
            
            [DecimalPrecision(10, 4)]public decimal? TerminalGasDecline { get; set; }
            /// <summary></summary>
            
            
            
            public int? MinimumPlugAndAbandonRate { get; set; }
            /// <summary></summary>
            
            
            
            public int? UnitId { get; set; }
            /// <summary></summary>
            
            
            
            public string Name { get; set; }
            /// <summary></summary>
            
            
            
            public string Description { get; set; }
            /// <summary></summary>
            
            
            
            public bool IsApproved { get; set; }

        /*
        /// <summary>FK_ForecastHorizontalDetails_ForecastHorizontal</summary> 
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] 
         public virtual ICollection<ForecastHorizontalDetail> ForecastHorizontalDetails_ForecastHorizontal { get; set; }
            
        /// <summary>FK_ForecastParameter_ForecastHorizontal</summary> 
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] 
         public virtual ICollection<ForecastParameter> ForecastParameter_ForecastHorizontal { get; set; }
            
        /// <summary>FK_ForecastSeasonalRisks_ForecastHorizontal</summary> 
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] 
         public virtual ICollection<ForecastSeasonalRisk> ForecastSeasonalRisks_ForecastHorizontal { get; set; }
            
        /// <summary>FK_TypeCurves_ForecastHorizontal</summary> 
         [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")] 
         public virtual ICollection<TypeCurve> TypeCurves_ForecastHorizontal { get; set; }
            
        /// <summary>FK_ForecastHorizontal_Forecast</summary>
        [ForeignKey("ForecastId")]
        public virtual Forecast Forecast { get; set; }
        /// <summary>FK_ForecastHorizontal_ForecastTypes</summary>
        [ForeignKey("ForecastTypeId")]
        public virtual ForecastType ForecastType { get; set; }
        /// <summary>FK_ForecastHorizontal_GasCalculations</summary>
        [ForeignKey("GasCalculationId")]
        public virtual GasCalculation GasCalculation { get; set; }
        /// <summary>FK_ForecastHorizontal_InitialFlowRateQis</summary>
        [ForeignKey("InitialFlowRateQiId")]
        public virtual InitialFlowRateQi InitialFlowRateQi { get; set; }
        /// <summary>FK_ForecastHorizontal_OutputRates</summary>
        [ForeignKey("OutputRateId")]
        public virtual OutputRate OutputRate { get; set; }
        /// <summary>FK_ForecastHorizontal_ProvenDevelopedProducingDatasets</summary>
        [ForeignKey("ProvenDevelopedProducingDatasetId")]
        public virtual ProvenDevelopedProducingDataset ProvenDevelopedProducingDataset { get; set; }
        /// <summary>FK_ForecastHorizontal_Units</summary>
        [ForeignKey("UnitId")]
        public virtual Unit Unit { get; set; }
        /// <summary>FK_ForecastHorizontal_RampTypes1</summary>
        [ForeignKey("InitialGasRampTypeId")]
        public virtual RampType InitialGasRampType { get; set; }
        /// <summary>FK_ForecastHorizontal_RampTypes</summary>
        [ForeignKey("InitialOilRampTypeId")]
        public virtual RampType InitialOilRampType { get; set; }
        /// <summary>FK_ForecastHorizontal_RampTypes3</summary>
        [ForeignKey("ShutinGasRampTypeId")]
        public virtual RampType ShutinGasRampType { get; set; }
        /// <summary>FK_ForecastHorizontal_RampTypes2</summary>
        [ForeignKey("ShutinOilRampTypeId")]
        public virtual RampType ShutinOilRampType { get; set; }
        /// <summary>FK_ForecastGlobalRisks_ForecastHorizontal</summary>
        public virtual ForecastGlobalRisk ForecastGlobalRisk { get; set; }
        /// <summary>FK_ForecastWellRisks_ForecastHorizontal</summary>
        public virtual ForecastWellRisk ForecastWellRisk { get; set; }
        */
    }
}
